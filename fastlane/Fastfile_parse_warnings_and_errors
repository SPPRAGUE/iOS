  
  
  # Custom Lane to parse the warnings and error that is generated by fastlane scan and post it in the MR as markdown.
  # Parameters:
  #   - mr: MR number that can be found in the url.
  #         Example: If the link for the MR is https://url/-/merge_requests/4447 - The MR number is 4447
  #   - token: Token required to post the message to the MR
  lane :parse_and_upload_build_warnings_and_errors do | options |
    mr_number = options[:mr]
    merge_request_url = ENV["PROJECT_URL"] + "/merge_requests/#{mr_number}/notes"
    errors_and_warnings_json_path = ENV["ERRORS_AND_WARNINGS_JSON_PATH"]
    json_path = "./../#{errors_and_warnings_json_path}"
    json_directory_path = File.dirname(json_path)

    FileUtils.mkdir_p(json_directory_path) unless Dir.exist?(json_directory_path)
    sh "xcrun xcresulttool get --legacy --format json --path #{get_latest_xcresult_file} > #{json_path}"

    parse_warnings_and_post_to_mr(
      merge_request_url: merge_request_url,
      token: options[:token]
    )

    parse_errors_and_post_to_mr(
      merge_request_url: merge_request_url,
      token: options[:token]
    )

    # Zip the xcresult file so that it could be uploaded to slack
    sh "ditto -c -k --sequesterRsrc --keepParent #{get_latest_xcresult_file} ./../xcresult.zip"
  end

  lane :get_latest_xcresult_file do
    xcresult_files = Dir.glob(File.join(ENV["XCRESULT_FOLDER"], '**', '*.xcresult'))
    sorted_xcresult_files = xcresult_files.sort_by { |file| File.mtime(file) }.reverse
    most_recent_xcresult = sorted_xcresult_files.first
    most_recent_xcresult
  end

  private_lane :parse_warnings_and_post_to_mr do |options|
    markdown_file_available = generate_warnings_markdown_from_json(
      warnings_json_path: ENV["ERRORS_AND_WARNINGS_JSON_PATH"],
      output_file_path: ENV["WARNINGS_MARKDOWN_PATH"],
    )

    if markdown_file_available
      post_markdown_to_mr(
        merge_request_url: options[:merge_request_url],
        token: options[:token],
        markdown_path: ENV["WARNINGS_MARKDOWN_PATH"]
      )
    end
  end

  private_lane :parse_errors_and_post_to_mr do |options|
    markdown_file_available = generate_errors_markdown_from_json(
      errors_json_path: ENV["ERRORS_AND_WARNINGS_JSON_PATH"],
      output_file_path: ENV["ERRORS_MARKDOWN_PATH"],
    )

    if markdown_file_available
      post_markdown_to_mr(
        merge_request_url: options[:merge_request_url],
        token: options[:token],
        markdown_path: ENV["ERRORS_MARKDOWN_PATH"]
      )
    end
  end