# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

require 'json'
import("Fastfile_download_libraries")
import("Fastfile_parse_code_coverage")
import("Fastfile_submit_build_to_appstore")
import("Fastfile_post_app_size")

# Directories
BUILD_DIR       = File.expand_path('build')

# Build
PROJECT                 = "MEGA.xcodeproj"
WORKSPACE               = "iMEGA.xcworkspace"
SCHEME                  = 'MEGA'
TEST_PLAN               = 'MEGA'
TEMP_KEYCHAIN_NAME      = "fastlane_appstore"
TEMP_KEYCHAIN_PASSWORD  = "TEMP_KEYCHAIN_PASSWORD"

ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "600"
ENV["FASTLANE_XCODE_LIST_TIMEOUT"] = "600"

default_platform(:ios)

platform :ios do

  desc "Upload symbols to crashlytics after running the gym"
  lane :upload_symbols do |options|
    upload_symbols_with_dsym_path(
      dsym_path: lane_context[SharedValues::DSYM_OUTPUT_PATH],
      configuration: options[:configuration] || "Release"
    )
  end

  desc "Upload symbols to crashlytics with dsym path as parameter"
  lane :upload_symbols_with_dsym_path do |options|
    targets = [
      "MEGA",
      "MEGANotifications",
      "MEGAIntent",
      "MEGAPicker",
      "MEGAPickerFileProvider",
      "MEGAWidget"
    ]

    targets.each_with_index do |target, index|
      upload_symbols_to_crashlytics(
        dsym_path: options[:dsym_path],
        gsp_path: gsp_path(configuration: options[:configuration], target: target),
        binary_path: "./SwiftPackages/checkouts/firebase-ios-sdk/Crashlytics/upload-symbols",
        step_name: "Uploading dsym #{index + 1} of #{targets.count} - target is #{target}"
      )
    end
  end

  desc "download device id's from firebase"
  lane :download_device_ids_from_firebase do
    firebase_app_distribution_get_udids(
      service_credentials_file: "service_credentials_file.json",
      app: "1:195061878697:ios:ab4f504247d0522a203eb8",
      output_file: "./devices.txt"
    ) 
  end

  desc "upload device id's to Apple developer portal"
  lane :upload_device_ids_to_developer_portal do
    register_devices(
      api_key: app_store_api_key,
      devices_file: "./devices.txt"
    )
  end

  desc "creates temporary keychain"
  lane :create_temporary_keychain do
    delete_keychain(
      name: TEMP_KEYCHAIN_NAME
    ) if File.exist? File.expand_path("~/Library/Keychains/#{TEMP_KEYCHAIN_NAME}-db")

    create_keychain(
      name: TEMP_KEYCHAIN_NAME,
      password: TEMP_KEYCHAIN_PASSWORD,
      unlock: true,
      timeout: 0,
      lock_when_sleeps: false,
      add_to_search_list: true
    )
  end

  desc "installs certificate and profiles for a given profile type to temp keychain created in create_temporary_keychain lane"
  lane :install_certificate_and_profile_to_temp_keychain do |options|
    match(
      type: options[:type],
      api_key: app_store_api_key,
      keychain_name: TEMP_KEYCHAIN_NAME,
      keychain_password: TEMP_KEYCHAIN_PASSWORD,
      readonly: options[:readonly],
      app_identifier: app_identifier(type: options[:type])
    )
  end

  desc "set the date and time as build number and write it to build_number file"
  lane :set_time_as_build_number do
    build_number = Time.new.strftime("%y%m%d%H%M")

    increment_build_number(
      build_number: build_number,
      xcodeproj: PROJECT
    )

    File.write("build_number.txt", build_number)
  end

  desc "Fetch the version number and write to a specified file"
  lane :fetch_version_number do |options|
    version = get_version_number(target: "MEGA")
    file_path = options[:output_file] || "version_number.txt"
    File.write(file_path, version)
    UI.success("Version number '#{version}' written to '#{file_path}'")
  end

  desc "Fetch the latest build number for a specific version and write to a specified file"
  lane :fetch_latest_build_number do |options|
    latest_testflight_build_number(
      app_identifier: "mega.ios", 
      version: options[:version], 
      api_key: app_store_api_key,
    )
    file_path = options[:output_file] || "build_number.txt"
    File.write(file_path, lane_context[SharedValues::LATEST_TESTFLIGHT_BUILD_NUMBER])
    UI.success("Build number '#{lane_context[SharedValues::LATEST_TESTFLIGHT_BUILD_NUMBER]}' written to '#{file_path}'")
  end

  desc "build app for simulator"
  lane :build_simulator do
    gym(
      workspace: WORKSPACE,
      scheme: SCHEME,
      configuration: "Debug",
      derived_data_path: "derivedData",
      buildlog_path: "buildlog",
      cloned_source_packages_path: "SwiftPackages",
      skip_package_ipa: true,
      skip_archive: true,
      destination: "generic/platform=iOS Simulator",
      xcargs: "-skipPackagePluginValidation"
    )
  end

  desc "archive for app store"
  lane :archive_appstore do
    gym(
      workspace: WORKSPACE,
      scheme: SCHEME,
      clean: true,
      export_method: "app-store",
      skip_profile_detection: true,
      output_name: "MEGA",
      output_directory: BUILD_DIR,
      configuration: 'Release',
      cloned_source_packages_path: "SwiftPackages",
      verbose: true,
      disable_package_automatic_updates: true,
      derived_data_path: "derivedData",
      archive_path: "archive",
      xcargs: '-skipPackagePluginValidation',
      export_options: {
        iCloudContainerEnvironment: "Production",
        signingStyle: "manual",
        provisioningProfiles: {
          "mega.ios": "match AppStore mega.ios",
          "mega.ios.MEGAIntent": "match AppStore mega.ios.MEGAIntent",
          "mega.ios.MEGANotifications": "match AppStore mega.ios.MEGANotifications",
          "mega.ios.MEGAPicker": "match AppStore mega.ios.MEGAPicker",
          "mega.ios.MEGAPickerFileProvider": "match AppStore mega.ios.MEGAPickerFileProvider",
          "mega.ios.MEGAShare": "match AppStore mega.ios.MEGAShare",
          "mega.ios.MEGAWidget": "match AppStore mega.ios.MEGAWidget"
        }
      }
    )
    
    File.write("archive_path.txt", lane_context[SharedValues::XCODEBUILD_ARCHIVE]) 
  end

  desc "Delete the temporary created keychain"
  lane :delete_temporary_keychain do 
    delete_keychain(name: TEMP_KEYCHAIN_NAME)
  end

  desc "Upload to iTunesConnect"
  lane :upload_to_itunesconnect do |options|
    # Get the 20 latest commints from the current branch.
    changelog_from_git_commits(
      commits_count: 20,  
      pretty: "- %s",
      date_format: "short",
      match_lightweight_tag: false,
      merge_commit_filtering: "include_merges"
    )
    
    upload_to_testflight(
      skip_submission: false,
      groups:["MEGA"],
      api_key: app_store_api_key,
      ipa: "#{BUILD_DIR}/MEGA.ipa",
      changelog: lane_context[SharedValues::FL_CHANGELOG],
    ) # to only upload the build
  end

  lane :all_certs do
    cert_dev()
    cert_qa()
    cert_appstore()
  end

  desc "Sync development signing certificates"
  lane :cert_dev do |options|
    match(
      readonly: options[:readonly],  
      type: "development",
      app_identifier: app_identifier(type: "development")
    )
  end

  desc "Sync QA (adhoc) signing certificates"
  lane :cert_qa do |options|
    match(
      readonly: options[:readonly],
      type: "adhoc",
      app_identifier: app_identifier(type: "adhoc")
    )
  end

  desc "Sync appstore signing certificates"
  lane :cert_appstore do |options|
    match(
      readonly: options[:readonly],
      type: "appstore",
      app_identifier: app_identifier(type: "appstore")
    )
  end

  private_lane :app_identifier do |options|
    case options[:type]
    when "adhoc"
      [
        "mega.ios.qa", 
        "mega.ios.qa.MEGAPicker", 
        "mega.ios.qa.MEGAPickerFileProvider", 
        "mega.ios.qa.MEGAShare", 
        "mega.ios.qa.MEGANotifications", 
        "mega.ios.qa.MEGAWidget", 
        "mega.ios.qa.MEGAIntent"
      ]
    when "appstore"
      [
        "mega.ios", 
        "mega.ios.MEGAPicker", 
        "mega.ios.MEGAPickerFileProvider", 
        "mega.ios.MEGAShare", 
        "mega.ios.MEGANotifications", 
        "mega.ios.MEGAWidget", 
        "mega.ios.MEGAIntent"
      ]
    else 
      [
        "mega.ios.dev", 
        "mega.ios.dev.MEGAPicker", 
        "mega.ios.dev.MEGAPickerFileProvider", 
        "mega.ios.dev.MEGAShare", 
        "mega.ios.dev.MEGANotifications", 
        "mega.ios.dev.MEGAWidget", 
        "mega.ios.dev.MEGAIntent"
      ]
    end
  end

  desc "Run unit tests for main app"
  lane :run_tests_app do |options|
    scan(
      workspace: WORKSPACE,
      scheme: SCHEME,
      cloned_source_packages_path: ENV['SWIFT_PACKAGES_PATH'],
      disable_package_automatic_updates: true,
      output_directory: ".",
      output_types: "junit",
      derived_data_path: "derivedData",
      code_coverage: true,
      xcodebuild_formatter: "xcbeautify",
      xcargs: '-skipPackagePluginValidation',
      parallel_testing: true,
      concurrent_workers: 2
    )
  end

  desc "Download metadata"
  lane :download_metadata do
    api_key_value = ENV['APP_STORE_CONNECT_API_KEY_VALUE']
    final_api_key_value = api_key_value.gsub("\\n", "\n")

    api_key_json = {
      "key_id": ENV['APP_STORE_CONNECT_KEY_ID'],
      "issuer_id": ENV['APP_STORE_CONNECT_ISSUER_ID'],
      "key": final_api_key_value,
      "in_house": false 
    }

    File.write("api_key_path.json", JSON.dump(api_key_json))
    sh "bundle exec fastlane deliver download_metadata --api_key_path api_key_path.json"
  end

  desc "Uploads metadata to app store connect"
  lane :upload_metadata_to_appstore_connect do
    deliver(
      api_key: app_store_api_key,
      app_version: get_version_number(target: "MEGA"),
      force: true, # Skip HTMl report verification
      skip_screenshots: true,
      skip_binary_upload: true
    )
  end

  desc "Archive using Adhoc"
  lane :archive_adhoc do
    gym(
      workspace: WORKSPACE,
      scheme: SCHEME,
      clean: true,
      export_method: "ad-hoc",
      output_name: "MEGA",
      output_directory: BUILD_DIR,
      configuration: 'QA',
      cloned_source_packages_path: "SwiftPackages",
      verbose: true,
      disable_package_automatic_updates: true,
      derived_data_path: "derivedData",
      archive_path: "archive",
      xcargs: '-skipPackagePluginValidation',
      export_options: {
        iCloudContainerEnvironment: "Production",
        signingStyle: "manual",
        provisioningProfiles: {
          "mega.ios.qa": "match AdHoc mega.ios.qa",
          "mega.ios.qa.MEGAIntent": "match AdHoc mega.ios.qa.MEGAIntent",
          "mega.ios.qa.MEGANotifications": "match AdHoc mega.ios.qa.MEGANotifications",
          "mega.ios.qa.MEGAPicker": "match AdHoc mega.ios.qa.MEGAPicker",
          "mega.ios.qa.MEGAPickerFileProvider": "match AdHoc mega.ios.qa.MEGAPickerFileProvider",
          "mega.ios.qa.MEGAShare": "match AdHoc mega.ios.qa.MEGAShare",
          "mega.ios.qa.MEGAWidget": "match AdHoc mega.ios.qa.MEGAWidget"
        }
      }
    )
  end

  desc "Upload build to Firebase"
  lane :upload_build_to_firebase do |options|
    # Get the 20 latest commints from the current branch.
    changelog_from_git_commits(
      commits_count: 20,  
      pretty: "- %s",
      date_format: "short",
      match_lightweight_tag: false,
      merge_commit_filtering: "include_merges"
    )
    
    google_app_id = get_info_plist_value(
      path: gsp_path(configuration: options[:configuration]), 
      key: 'GOOGLE_APP_ID'
    )

    firebase_app_distribution(
      app: google_app_id,
      service_credentials_file: "service_credentials_file.json",
      ipa_path: "#{BUILD_DIR}/MEGA.ipa",
      groups: "internal-testers",
      release_notes: lane_context[SharedValues::FL_CHANGELOG]
    )
  end

  private_lane :gsp_path do |options|
    if options[:target].nil? || options[:target] == "MEGA"
      "./iMEGA/Supporting Files/#{options[:configuration]}/GoogleService-Info.plist"
    else
      "./iMEGA/Extensions/#{options[:target]}/Supporting Files/#{options[:configuration]}/GoogleService-Info.plist"
    end
  end

  desc "zip archive to path"
  lane :zip_Archive do |options|
    zip(
      path: options[:archive_path],
      output_path: options[:zip_path]
    )
  end

  desc "setup your development environment"
  lane :setup do |options|
    if check_repo_is_internal == true
      cert_dev readonly:true
    end
    update_submodules_and_run_cmake
    configure_sdk_and_chat_library(use_cache: true)
    setup_git
  end

  private_lane :update_submodules_and_run_cmake do
    sh "git submodule update --init --recursive"
    current_directory = Dir.pwd
    target_directory = File.join(current_directory, "./../Modules/DataSource/MEGAChatSDK/Sources/MEGAChatSDK/src/")
    sh "cd #{target_directory} && cmake -P genDbSchema.cmake"
  end

  private_lane :setup_git do |options|
    hooksPath = '../../scripts'
    gitHooksPath = '../.git/hooks'
    FileUtils.mkdir_p(gitHooksPath) unless File.exist?(File.expand_path(gitHooksPath))
    sh("ln -s -f #{hooksPath}/pre-commit #{gitHooksPath}/pre-commit")
    UI.message('Your pre-commit is hooked ✅')
  end

end
